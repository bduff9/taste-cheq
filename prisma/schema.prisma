generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  passwordHash String
  name        String
  avatarUrl   String?
  homeCity    String?
  homeState   String?
  isAdmin     Boolean  @default(false)
  // Audit fields
  created     DateTime @default(now())
  createdById String?
  createdBy   User?    @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers User[]  @relation("UserCreatedBy")
  updated     DateTime?
  updatedById String?
  updatedBy   User?    @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  updatedUsers User[]  @relation("UserUpdatedBy")
  deleted     DateTime?
  deletedById String?
  deletedBy   User?    @relation("UserDeletedBy", fields: [deletedById], references: [id])
  deletedUsers User[]  @relation("UserDeletedBy")

  // Relations
  createdRestaurants Restaurant[] @relation("RestaurantCreatedBy")
  updatedRestaurants Restaurant[] @relation("RestaurantUpdatedBy")
  deletedRestaurants Restaurant[] @relation("RestaurantDeletedBy")

  createdMenuItems MenuItem[] @relation("MenuItemCreatedBy")
  updatedMenuItems MenuItem[] @relation("MenuItemUpdatedBy")
  deletedMenuItems MenuItem[] @relation("MenuItemDeletedBy")

  createdRatings Rating[] @relation("RatingCreatedBy")
  updatedRatings Rating[] @relation("RatingUpdatedBy")
  deletedRatings Rating[] @relation("RatingDeletedBy")

  createdTriedItems TriedItem[] @relation("TriedItemCreatedBy")
  updatedTriedItems TriedItem[] @relation("TriedItemUpdatedBy")
  deletedTriedItems TriedItem[] @relation("TriedItemDeletedBy")

  ratings          Rating[]     @relation("UserRatings")
  triedItems       TriedItem[]  @relation("UserTriedItems")
  sessions         Session[]
}

model Restaurant {
  id          String   @id @default(uuid())
  name        String
  address     String
  googlePlaceId String
  latitude    Float
  longitude   Float
  // Audit fields
  created     DateTime @default(now())
  createdById String?
  createdBy   User?    @relation("RestaurantCreatedBy", fields: [createdById], references: [id])
  updated     DateTime?
  updatedById String?
  updatedBy   User?    @relation("RestaurantUpdatedBy", fields: [updatedById], references: [id])
  deleted     DateTime?
  deletedById String?
  deletedBy   User?    @relation("RestaurantDeletedBy", fields: [deletedById], references: [id])

  // Relations
  menuItems   MenuItem[]
}

model MenuItem {
  id            String   @id @default(uuid())
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  name          String
  description   String
  category      String?
  price         Decimal?
  customFields  Json?
  imageUrl      String?
  // Audit fields
  created     DateTime @default(now())
  createdById String?
  createdBy   User?    @relation("MenuItemCreatedBy", fields: [createdById], references: [id])
  updated     DateTime?
  updatedById String?
  updatedBy   User?    @relation("MenuItemUpdatedBy", fields: [updatedById], references: [id])
  deleted     DateTime?
  deletedById String?
  deletedBy   User?    @relation("MenuItemDeletedBy", fields: [deletedById], references: [id])

  // Relations
  ratings    Rating[]
  triedItems TriedItem[]
}

model Rating {
  id          String   @id @default(uuid())
  user        User     @relation("UserRatings", fields: [userId], references: [id])
  userId      String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId  String
  stars       Int
  text        String?
  imageUrl    String?
  // Audit fields
  created     DateTime @default(now())
  createdById String?
  createdBy   User?    @relation("RatingCreatedBy", fields: [createdById], references: [id])
  updated     DateTime?
  updatedById String?
  updatedBy   User?    @relation("RatingUpdatedBy", fields: [updatedById], references: [id])
  deleted     DateTime?
  deletedById String?
  deletedBy   User?    @relation("RatingDeletedBy", fields: [deletedById], references: [id])
}

model TriedItem {
  id          String   @id @default(uuid())
  user        User     @relation("UserTriedItems", fields: [userId], references: [id])
  userId      String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId  String
  // Audit fields
  created     DateTime @default(now())
  createdById String?
  createdBy   User?    @relation("TriedItemCreatedBy", fields: [createdById], references: [id])
  updated     DateTime?
  updatedById String?
  updatedBy   User?    @relation("TriedItemUpdatedBy", fields: [updatedById], references: [id])
  deleted     DateTime?
  deletedById String?
  deletedBy   User?    @relation("TriedItemDeletedBy", fields: [deletedById], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
